// Task.cpp : Определяет функции для статической библиотеки.
//

#include "pch.h"
#include "Task.h"


/*
	Напишите функцию, которая складывает две матрицы целых чисел произвольного размера, помещает результат
	в новую матрицу, которая должна быть создана и возвращает указатель на созданную матрицу. Размер матриц,
	которые подлежат сложению, должен совпадать. Если это не так, то функция должна вернуть пустой указатель.
	Если первый или второй параметр равен пустому указателю - функция должна вернуть пустой указатель.Если 
	размеры матриц меньше или равны нулю хотя бы по одной размерности - функция также должна вернуть пустой
	указатель

	1. Функция должна иметь имя MatrixAddition
	2. Функция в качестве параметров должна принимать следующее:
		- первый параметр - указатель на первую складываемую матрицу. Матрица должна представлять собой двумерный 
			динамический массив. Первый параметр указывает на массив указателей, каждый из которых указывает на 
			одномерный массив целых чисел
		- второй параметр - указатель на вторую складываемую матрицу. Матрица должна представлять собой двумерный
			динамический массив. Первый параметр указывает на массив указателей, каждый из которых указывает на
			одномерный массив целых чисел
		- третий параметр - количество столбцов матриц
		- четвертый параметр - количество строк матриц

		порядок следования параметров изменять НЕЛЬЗЯ
	3. Функция должна возвращать указатель на результирующую матрицу. Ее размерность должна соответствовать 
	размерности исходных матриц. Тип возвращаемого результата - int**. Ваша функция должна создавать результирующую
	матрицу и выделять для ее хранения место в динамической памяти. Возвращаемый указатель должен указывать на массив
	указателей, каждый из которых указывает на одномерный массив чисел, представляющих из себя одну строку матрицы.

	!!!!! ВАЖНО !!!!!
	В данном файле разрешается разместить кроме кода требуемой функции - код любых других вспомогательных
	функций. Никакой функции main() в этом файле быть не должно.
	Если вы хотите испытать и отладить вашу функцию - пишите код в файле Example.cpp проекта Example данного решения
	Для этого задайте в качестве запускаемого проекта проект Example.

	ДЛЯ АВТОМАТИЧЕСКОГО ТЕСТИРОВАНИЯ  проверки правильности работы вашего задания - сделайте запукаемым проект
	Tests и запустите его. Если функция написана правильно - все тесты должны успешно выполниться
	(зеленый цвет в консоли). Если ваша функция работает некорректно - в консоли будут сообщения красным цветом
*/
